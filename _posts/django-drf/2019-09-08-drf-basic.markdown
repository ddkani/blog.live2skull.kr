---
title:  "djangorestframework 작성 규칙 - 1"
date:   2019-09-01 00:59:09 +0900

toc: true
toc_label: "둘러보기"
toc_icon: "columns"

categories: 
    - django
    - djangorestframework

tags:
    - django
    - djangorestframework
    - python
---

django, djangorestframework 프레임워크를 적용한 파이썬 웹 API 작성에 적용되는 규칙을 정의한다.

{% include important.html content="본 문서는 작성자의 상황에 맞게 적용된 규칙입니다." %}


## 모듈 개요

|대상|설명|비고|
|------|---|---|
|models|데이터베이스 스키마 작성|객체의 DB Operation에 해당하는 기능만 작성|
|serializer|serialization & deserialization|사용자 입력 값 검증, 반환 값 규격 정의|
|validator|serializer에서 자주 사용되는 필드 검증 작성|Enum const, regex validation 등|
|exception|사용자 정의 오류 작성|drf 사용시 APIException 확장|
|enum|사용자 정의 Constant 값 작성||

#### ModelView와 ActionView작성 요령
View는 URL & Method와 첫번째로 직접 연결되어 있다.  

**ModelView**  

URL하위에 특정 객체(Model)에 대한 요청을 Restful한 방식으로 작성할 수 있다.

|Operation|Method|PK|Description|
|----|--|--|--------|
|list|GET|x|해당 ModelView와 연결된 객체를 반환. filterset과 같이 사용할 경우 검색기능을 사용할 수 있다. pagnation_class 작성도 가능.
|retrive|GET|o|PK값이 해당하는 객체를 반환.
|destroy|DELETE
|save|PUT
|perform_update|PATCH
|@action|ANY|o|retrive 하위에서 동작하며, 해당 pk 인스턴스에 대한 액션을 URL로 구분하여 정의.

**ActionView**  

특정 Model, Serializer와는 연결되어 있지 않으며,


#### #0. serializer 작성
- **default serializer (raise exception)**  
MODEL_NAME [MODEL] [USAGE] Serializer
ex), UserModelGuestSerializer  
모델과 연결해서 해당 값을 열람하고자 할 때 이용.  
Usage를 사용하는 경우에는 해당 목적에 따라 필드 또는 모델의 R/W를 제한한다.  
그렇지 않고 모델명만 사용하는 경우 해당 Serializer 하나만 있음을 의미한다.

- **request serializer (raise exception)**  
REQ_NAME [Req] Serializer
ex) AuthPortalReqSerializer, AuthEmailReqSerializer  
다양한 모델 또는 특정 모델에 연계되어 있거나, 그렇지 않은 요청의 규격 정의 및 값을 검증한다.

- **response serializer (default: no exception)**  
REQ_NAME [Resp] Serializer  
ex) AuthPortalRespSerializer, AuthEmailRespSerializer  
다양한 모델 또는 특정 모델에 연계되어 있거나, 그렇지 않은 요청의 결과값의 규격을 정의한다. (Deserialization)

- **pre_check serializer (ignore exception)**  
    CheckSerializer / ViewSerializer / SaveSerializer  
    -> ModelView, ActionView는 자세한 동작의 직접 구현이 아닌
    Serializer, Model, Celery backgroud job등의 기능 구현체들을
    유기적으로 연결하는 체인의 개념이라고 생각하자.



#### #1. exception handing
sentry (Django integration)과 연계하여 사용.  
단, 사용자에게 오류를 반환할 때 최초 어느 단계에서 에러를 발생시켜야 하는지 확인.

사용자 입력값 검증 오류의 경우,
- 입력값 검증 전용 Request: 오류 raise 하지 않고 결과만 반환
- 검증 이후 호출하는 Request: 오류 raise 하고 에러 페이지 반환

Validator 사용시에는 raise_exception=True 사용.
또는 에러가 존재할 경우 user 정보와 함께 반환
-> 세션과 연계한 user integration 작성 가능한지 확인 필요.

#### #2. exception tracing with sentry & django integration
