---
layout: post
title:  "자바 - JPA(Java Persistance API)"
date:   2020-04-23 16:00:00 +0900
categories: java
---

자바의 JPA(Java Persistance API)에 대해서 알아봅니다.

⚠️ 추가 예정  
[(repo) JPA custom examples](about:blank)

## Persistance API가 무엇인가요?
다량의 데이터를 생성, 검색, 수정, 삭제 (CRUD) 하기 위해 데이터베이스의 도입은 거의 필수적이라고 할 수 있습니다. 하지만 RDBMS와 자바의 OOP 객체의 불칠치로 인한 패러다임이 발생하였고, 이를 해결하기 위해 객체와 RDBMS를 매핑하는 역할을 하는 ORM(Object-Related Model)의 규격으로써 `JPA`를 만들었습니다.

JPA는 RDBMS와 객체를 맵핑하는 ORM의 구현체가 아닌 인터페이스로서, 일종의 규격으로 이해하면 됩니다. 사용자는 `JPA`의 인터페이스를 준수하여 `엔티티 클래스, Repository`를 작성하면, `Hibernate, TopLink, CoCoBase` 등 `JPA`에 맞추어 실제 구현되어 있는 ORM 프레임워크에서 사용할 수 있습니다.

ORM 프레임워크가 `JPA`를 준수하여 만들었기 때문에, 사용자 입장에서는 어떠한 프레임워크를 사용해도 동일한 엔티티 구현을 이용해서 ORM을 사용할 수 있습니다.


## 구성요소

|이름|역할|
|---|-----|
|Entity|필드 컬럼 타입 등
|Repository|데이터베이스 접근 및 CRUD 과정 

💡 웹 프레임워크(Spring Framework 등)과 연동을 위한 추가적인 구현은 해당 프레임워크 분석에서 다룹니다.

### 엔티티 작성

다음은 작성된 엔티티의 예제입니다.
```
package com.example.demo.domain;
import lombok.*;
import javax.persistence.*;

@Entity
@Getter
@NoArgsConstructor(access = Access.PROTECTED)
public class Song
{
    @Id
    @GeneratedValue
    private Long id;
    
    @Column(length=100, nullable=false)
    private String title;
    
    public void updateTitle(String title)
    {
        this.title = title;
    }

    @Builder
    public Song(String title)
    {
        this.title = title;
    }
}
```
💡 lombok annotation의 자세한 설명은  해당 프레임워크 분석에서 다룹니다.

- `@Entity` 를 클래스에 적용함으로써, 해당 클래스가 엔티티 클래스임을 선언합니다.
- `@Getter` 모든 필드(컬럼)에 대한 읽기는 허용했지만, 필드를 전부 private로 선언 함으로써, 필드의 무분별한 수정을 제한했습니다. 
- 만약 모든 필드에 대헤 setter를 설정하거나, 수정이 가능하게 한다면 특정 값이 어느 시점에 어떠한 의도로 변경될지 알 수 없으므로, 의도치 않은 상황이 발생할 수 있게 됩니다.
- 따라서 위 예제의 `updateTitle` 메서드와 같이 특정 행위를 하고자 할 때 변경할 필드를 명확히 하는 setter 메소드를 작성하여 사용합니다.



### 어노테이션

아래에서 필드를 RDBMS로 변경하는 예제는 `mysql`을 대상으로 설명합니다.


**@Entity**  
적용한 클래스를 `JPA Entity`로 선언합니다.

**@Id**  
적용한 필드를 primary key로 사용합니다.

**@GeneratedValue**  
`@Id` 어노테이션을 적용한 primary key 필드에 적용하면, mysql 기준으로 auto_increment를 적용합니다. 단, 필드는 `Long` 타입만 사용할 수 있으며, mysql 에서는 `BIGINT` 타입을 갖게 됩니다.   
이외에도 **strategy** 속성으로 자동 생성 옵션을 지정할 수 있습니다.

**@Column**  
필드를 RDBMS어 선언하는 DDL 문을 생성하는 옵션을 제공합니다.  
기본적으로 `@Entity`로 선언된 클래스의 모든 필드는 모두 컬럼으로 사용되므로 옵션을 제공하고자 하는 필드에만 선언하면 됩니다.  

사용 가능한 옵션

|이름|옵션|
|---|-----|
|columnDefinition|필드 컬럼 타입 등
|unique|필드의 unique 설정 여부. 2개 이상은 별도의 방법을 사용.
|nullable|필드의 null 값 허용 여부.
|length|필드의 데이터 크기.

💡 하나의 `Entity`에서 두 개 이상의 컬럼에 `unique` 설정하면, 데이터베이스에서는 `unique`가 설정된 컬럼들을 별도의 테이블을 만들어 관리합니다. `@UniqueConstranits` 로 설정하며 다음을 따릅니다. [추가 예정](about:blank)

예) `String` 타입의 컬럼의 DDL 컬럼 타입 변경  
`String` 타입은 기본적으로 `VARCHAR`로 변환되나, 옵션을 제공하여 `TEXT` 타입을 사용하도록 지정했습니다.
```
@Column(columnDefinition = "TEXT", nullable = false)
private String lyric;
```