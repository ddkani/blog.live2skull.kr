---
layout: post
title:  "백준 알고리즘 풀이 - 2579번(RGB거리)"
date:   2020-04-05 12:00:00 +0900
categories: python algorithm dynamicprogramming
---

[문제](https://www.acmicpc.net/problem/1149) |
**[✏️정답 확인](https://github.com/live2skull/TheLordOfBOJ/blob/master/problems/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/1149.py)**

다이나믹 프로그래밍으로 풀이하되, N번째의 선택이 N-1에 의해 제약을 받으므로, 이전 단계에 선택한 'R, G, B' 에 따라 각각 가능한 경우의 수를 달리 하여 저장한다.  
계산이 완료되면 마지막으로 가능한 선택지 중 가장 작은 경우의 수를 선택한다.

```
def main():

    cnt = int_input()
    cost = []
    dp = []
    for i in range(0, cnt):
        cost.append(list(ints_input()))
        dp.append([0,0,0])

    dp[0][0] = cost[0][0]
    dp[0][1] = cost[0][1]
    dp[0][2] = cost[0][2]

    dp[1][0] = cost[1][0] + min(dp[0][1], dp[0][2])
    dp[1][1] = cost[1][1] + min(dp[0][0], dp[0][2])
    dp[1][2] = cost[1][2] + min(dp[0][0], dp[0][1])

    for i in range(2, cnt):
        # 문제에서는 i번째의 선택이 i-1, i+1과 달라야 한다고 했지만,
        # dp 작성시에 오름차순으로 작성하므로 i+1에 대한 판단을 하지 않아도 된다.
        dp[i][0] = cost[i][0] + min(dp[i-1][1], dp[i-1][2])
        dp[i][1] = cost[i][1] + min(dp[i - 1][0], dp[i - 1][2])
        dp[i][2] = cost[i][2] + min(dp[i - 1][0], dp[i - 1][1])

    print(min(dp[cnt-1][0], dp[cnt-1][1], dp[cnt-1][2]))
```
