---
title:  "백준 알고리즘 풀이 - 1463번(1로 만들기)"
date:   2020-04-04 00:00:00 +0900

categories: 
    - algorithm
tags:
    - algorithm
    - dynamicprogramming
---

[문제](https://www.acmicpc.net/problem/1463) |
**[✏️정답 확인](https://github.com/live2skull/TheLordOfBOJ/blob/master/problems/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/1463.py)**

N값이 N-X에 의해 결정되므로(칠하는 전체 비용) 다이나믹 프로그래밍으로 구현한다.


**1. 상향식으로 코드를 작성할 때 N에서 N-X의 값을 신뢰하지 못함.**   
이전 N-X에서 제약조건을 준수하면서 최소값을 선택하였다면(이 이전 선택지로 인한 제약조건은 없음. 이전 선택지로 가능한 값만 추출) 해당 값은 재판단이 필요하지 않은 계산이 완료된 값임.

**2. N을 선택할 때 N-X로 인해 제약사항이 없으므로 이전 선택지를 저장할 필요가 없음.**  
각 이전 선택지를 (나누기 3이전, 나누기 2이전, 빼기 1이전)의 각각 횟수의 최솟값 + 1 로써 단순히 계산이 가능했지만
전체 경로를 전부 재계산해야한다고 생각하여 코드가 복잡해짐 (`dp[n] = val` 로 구현할 것을 `dp[n][sel] = val` 로써 구현)


📝 최종 작성한 코드
```
dp = [0] * 1000001 # type: list
dp[1] = 0
dp[2] = dp[1] + 1 # 2 가능
dp[3] = dp[1] + 1 # 3 가능

def main():
    tg = int_input()

    tmp = [] # 비교값이 1-3개일수도 있음. if문이 더 효율적인가?
    # 첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.
    for i in range(4, tg + 1):
        if i % 3 == 0: tmp.append(dp[i // 3])
        if i % 2 == 0: tmp.append(dp[i // 2])
        tmp.append(dp[i - 1])
        dp[i] = min(tmp) + 1
        tmp.clear()

    print(dp[tg])
```
