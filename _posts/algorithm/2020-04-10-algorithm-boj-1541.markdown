---
layout: post
title:  "백준 알고리즘 풀이 - 1541번(잃어버린 괄호)"
date:   2020-04-1- 22:00:00 +0900
categories: python pip algorithm
---

[문제](https://www.acmicpc.net/problem/15411) |
**[✏️정답 확인](https://github.com/live2skull/TheLordOfAlgorithm/blob/master/problems_boj/%EA%B7%B8%EB%A6%AC%EB%94%94_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/1541.py)**

연산식에서 괄호를 뺀 식이 주어지고, 해당 식에 임의로 괄호를 쳤을 때 구할 수 있는 최솟값을 구한다.

> 입력 예: 30-20+60-80

식은 반드시 숫자로 끝나며, 기호는 '+', '-'로만 구성되고, 숫자는 5자리를 넘지 않는다.  
식을 기호와 양의 정수로 파싱한 후, 다음과 같이 상황을 나누어 최솟값을 구하였다.

\#0. 식의 시작점에서는 기호가 없으므로 덧셈 모드로 시작한다.  
\#1. 덧셈 모드에서 덧셈이 등장하면 값을 그대로 더한다.  
\#2. 덧셈 모드에서 뺄셈이 등장하면, 값을 때면서 이어지는 덧셈 값들을 전부 뺀다. (이때부터 뺄셈 모드)
`30-20+30...` 일 때, `30-(20+30...)`으로 괄호를 붙여 계산한다고 가정.  
\#3. 뺄셈 모드에서 덧셈이 등장하면, 해당 값을 뺀다. 2번과 같은 맥락이다.  
\#4. 뺄셈 모드에서 뺄셈이 등장하면, 마찬가지로 해당 값을 뺀다.    
`30-20+30-40+50...` 일 때, `30-(20+30)-(40+50...)` 으로 괄호를 붙여 계산한다고 가정.

문제를 처음 풀이할 때는 뺄셈 기호에 따라 복잡하게 처리하려고 하였으나 실은 숫자값을 양의 정수로 파싱했기 때문에, 뺄셈이 등장한 이후의 모든 값을 빼면 최솟값을 구할 수 있다.
