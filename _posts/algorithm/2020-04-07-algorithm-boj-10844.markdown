---
layout: post
title:  "백준 알고리즘 풀이 - 10844(쉬운 계단 수)"
date:   2020-04-07 23:00:00 +0900
categories: python algorithm dynamicprogramming
---

[문제](https://www.acmicpc.net/problem/10844) |
**[✏️정답 확인](https://github.com/live2skull/TheLordOfBOJ/blob/master/problems/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/10844.py)**

N번째 선택이 N-X에 의해 결정된다.  
먼저 `D[N] = D[N-X] + ...` 꼴의 점화식으로 풀이를 시도하였으나 점화식을 구성하지 못하였고, 다음 코드로 각 N에서 몇개의 경우의 수가 발생하는지 확인하여 보았다.

💡 DP에 데이터를 저장하고자 할 때, 전체 데이터가 아닌 선택에 필요한 데이터(**주로 횟수 / 갯수**)만을 저장한다.

📝 테스트 코드 - 경우의 수 구하기.
```
dp = list()
dp.append(None)
dp.append(['1', '2', '3', '4', '5', '6', '7', '8', '9'])

def test():

    for i in range(2, 11):
        tmp = []

        for _v in dp[i - 1]:
            v = int(_v[-1])
            if v == 0: tmp.append(_v + str(1))
            elif v == 9: tmp.append(_v + str(8))
            else:
                tmp.append(_v + str(v + 1))
                tmp.append(_v + str(v + -1))

        dp.append(tmp)

    for i in range(1, 11):
        cnt = 0
        for j in dp[i]:
            if j.endswith('0') or j.endswith('9'): cnt += 1
        print("N=%s cnt: %s / %s" % (i, len(dp[i]), cnt))

```

N=1부터 **9, 17, 32, 61, 116 ...** 순으로 구하였는데, 수의 규칙을 찾을 수 없어 일반적인 수열의 점화식으로 풀이할 수 없었다.

이에 N번째 수는 N-X에서 선택한 마지막 자리 수에 따라 선택 가능한 수가 제약되는 **제약조건** 이 있으며, **마지막 자리의 갯수**만 저장하면 다음 N에서 선택 가능한 경우의 수를 구해낼 수 있음을 이용하여 문제 풀이를 유도하였다.

1은 0으로만, 9는 8로만 숫자 생성이 가능하며, 나머지 숫자는 2개씩 생성이 가능함을 적절히 구현한다.

📝 최종 작성 코드
```
## 직전에서 계산. 맨 앞에서 각 자리의 수를 카운트..?
dp = list()
dp.append(None) # unused
dp.append([0,1,1,1,1,1,1,1,1,1]) # 0 ~ 9의 갯수

def main():
    tg = int_input()

    for i in range(2, tg + 1):
        tbl = dp[i - 1] # 직전 선택지
        tmp = [0] * 10 # N 선택지 저장 임시변수

        tmp[1] = tbl[0] # 전 숫자의 0 => 1만 생성 가능
        tmp[8] = tbl[9] # 전 숫자의 9 => 8만 생성 가능

        for j in range(1, 9):
            tmp[j - 1] += tbl[j]
            tmp[j + 1] += tbl[j]

        # 나머지 연산
        for j in range(0, 10): tmp[j] %= 1000000000
        dp.append(tmp)

    # 최종 더한 값이 1000000000 보다 클 경우 역시 나머지 연산
    print(sum(dp[tg]) % 1000000000)
```

**직전 선택지에 의한 제약조건**을 받으므로, 이전 숫자의 갯수를 각각 저장한다.

전체 갯수를 1000000000 으로 나눈 나머지를 제출한다. 이때, 각 선택지의 나머지를 구하였으나 전체를 더한 값이 다시 1000000000으로 나누어 질 수 있음에 유의한다.
